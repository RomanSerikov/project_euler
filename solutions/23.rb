# № 23 — Неизбыточные суммы
# Идеальным числом называется число, у которого сумма его делителей равна самому числу.
# Например, сумма делителей числа 28 равна 1 + 2 + 4 + 7 + 14 = 28, что означает,
# что число 28 является идеальным числом.

# Число n называется недостаточным, если сумма его делителей меньше n,
# и называется избыточным, если сумма его делителей больше n.

# Так как число 12 является наименьшим избыточным числом (1 + 2 + 3 + 4 + 6 = 16),
# наименьшее число, которое может быть записано как сумма двух избыточных чисел, равно 24.
# Используя математический анализ, можно показать, что все целые числа больше 28123
# могут быть записаны как сумма двух избыточных чисел. 
# Эта граница не может быть уменьшена дальнейшим анализом, даже несмотря на то,
# что наибольшее число, которое не может быть записано как сумма двух избыточных чисел,
# меньше этой границы.

# Найдите сумму всех положительных чисел,
# которые не могут быть записаны как сумма двух избыточных чисел.

def divisors(n)
  2.upto(Math.sqrt(n)).select { |i| (n % i).zero? }.each_with_object([]) do |i, divisors|
    divisors << i
    divisors << n / i unless i == n / i
  end
end

def abundant?(n)
  divisors(n).reduce(1, :+) > n
end

def abundant(limit)
  (12...limit).select { |i| abundant?(i) }
end

def sum_non_abundant
  n = 28_123
  abd_nums = abundant(n)
  abd_list = { sum: 0 }
  
  while abd_nums.count > 1
    (0..abd_nums.count - 1).each do |i|
      chk_num = abd_nums[0] + abd_nums[i]
      next if abd_list[chk_num]
      break if chk_num > n
      abd_list[chk_num] = chk_num
      abd_list[:sum] += chk_num
    end
    break if abd_nums[0] > n / 2
    abd_nums.shift
  end

  ((n * (n + 1)) / 2) - abd_list[:sum]
end

puts sum_non_abundant
